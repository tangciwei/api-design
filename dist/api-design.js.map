{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/api-event.js","webpack:///./src/api-express.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","event","require","apiExpress","ENV_LOCAL","ENV_PROD","LOGIN","_ref","hooks","config","dev","arguments","length","undefined","api","assign","method","dataType","timeout","silent","devConfig","_getEnvConfig","host","_envHost","env","envList","envHost","_defineProperty","devEnv","keys","getEnvConfig","restConfig","copy","code","apiOutput","forEach","apiName","itemConfig","getItemConfig","generateApiDefine","requestBefore","request","requestAfter","successHandle","errorHandle","timeoutHandle","loadingUi","loadingCount","loadingOnoff","apiValue","currentEnv","currentHost","login","devLogin","devSet","data","option","context","timer","Promise","resolve","reject","beforeInput","requestFinished","clearTimeout","readyRequest","requestInput","setTimeout","timeoutErr","resolve2","reject2","handle","mock","then","successData","fail","requestData","catch","err","catchHandle","backErr","resolve1","reject1","beforeResult","requestBeforeWrap","listen","console","error","ApiEvent","_classCallCheck","this","callbacks","_len","Array","_key","arr","fn","apply","callback","push","index","indexOf","splice","Req","body","Res","JSON","parse","_ref2"],"mappings":"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","file":"api-design.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","let event = require('./api-event');\nlet apiExpress = require('./api-express');\n\n// 保留字\nconst ENV_LOCAL = 'local'; // 本地环境变量，用于本地mock,不依赖请求。\nconst ENV_PROD = 'prod'; // 生产环境\nconst LOGIN = 'login'; // 接口需要登录\n\n/**\n * \n * @param {object} hooks 生命周期函数 \n * @param {object} config 线上配置\n * @param {object} dev 开发环境以及mock数据 {config: {},mock: {}}\n */\n\nmodule.exports = function apiDesign({\n        hooks,\n        config\n    }, dev = {}) {\n    // todo: 校验hooks的函数合法性，config合法性\n    // hooks.request+config.host+config.api等\n    if (!hooks || !config) {\n        console.error('请配置hooks和config');\n        return;\n    }\n\n    config = Object.assign({}, {\n        method: 'post',\n        dataType: 'json',\n        timeout: 30000,\n        silent: false\n    }, config);\n\n    let api = config.api;\n    let devConfig = dev.config;\n\n    /**\n     * 获取全局的：env,host,envList,envHost\n     */\n    function getEnvConfig(devConfig, host) {\n        let env = ENV_PROD;\n        let envList = [ENV_LOCAL, ENV_PROD];\n        let envHost = {\n            [ENV_PROD]: host,\n            [ENV_LOCAL]: host\n        };\n\n        if (devConfig) {\n            let apiDev = devConfig.api;\n            let devEnv = devConfig.env;\n            // todo: 检查是否有local字段和prod字段\n            envHost = Object.assign({}, envHost, devConfig.envHost);\n            envList = Object.keys(envHost);\n            if (devEnv && devEnv !== ENV_LOCAL && devEnv !== ENV_PROD) {\n                env = devEnv;\n                host = envHost[env];\n            }\n        }\n\n        return {\n            env,\n            host,\n            envList,\n            envHost\n        };\n    }\n\n    // 这里的env和host还可以被具体的每一项覆盖\n    let {\n        env,\n        host,\n        envList,\n        envHost\n    } = getEnvConfig(devConfig, config.host);\n\n    let restConfig = ((config) => {\n        let copy = Object.assign({},config);\n        delete copy.api;\n        delete copy.code;\n        return copy;\n    })(config);\n\n    /**\n     * 获取每个api的具体配置，以及env\n     * @param {string} apiName \n     * @param {object} apiValue \n     */\n    function getItemConfig(apiName, apiValue) {\n        let currentEnv = env;\n        let currentHost = envHost[env];\n        let login = apiValue.login;\n        // 扫描devconfig,得到host\n        if (devConfig && devConfig.api && devConfig.api[apiName]) {\n            // env\n            // 目前只管env,后期再其他配置\n            currentEnv = devConfig.api[apiName].env || env;\n            currentHost = envHost[currentEnv];\n            let devLogin = devConfig.api[apiName].login;\n            if (devLogin !== undefined) {\n                login = devLogin;\n            }\n        }\n\n        let devSet = {\n            host: currentHost\n        };\n        if (login !== undefined) {\n            devSet.login = login;\n        }\n\n        // 拼装入参\n        return {\n            env: currentEnv,\n            config: Object.assign({}, restConfig, apiValue, devSet)\n        };\n    }\n\n    let apiOutput = {}; // 暴露外部\n    Object.keys(api).forEach(apiName => {\n        let apiValue = api[apiName];\n        let itemConfig = getItemConfig(apiName, apiValue);\n        let env = itemConfig.env;\n        apiOutput[apiName] = generateApiDefine(itemConfig, env);\n    });\n    // 生命周期\n    let {\n        requestBefore,\n        request,\n        requestAfter,\n        successHandle,\n        errorHandle,\n        timeoutHandle,\n        loadingUi\n    } = hooks;\n    // 管理loading变量\n    let loadingCount = 0;\n    let loadingOnoff = false;\n    // 核心方法：生成每一个api的方法\n    function generateApiDefine(itemConfig, env) {\n        return (data, option) => {\n            // 当前请求上下文\n            let context = {};\n            let timer = null;\n            itemConfig.config = Object.assign({}, itemConfig.config, option);\n\n            return new Promise((resolve, reject) => {\n                let beforeInput = {\n                    data,\n                    config: itemConfig.config\n                };\n\n                context = {\n                    data,\n                    config: itemConfig.config\n                };\n                // 请求前封装，兼容promise函数和普通函数\n                let requestBeforeWrap = beforeInput => {\n                    return new Promise((resolve1, reject1) => {\n                        if (!requestBefore) {\n                            resolve1(beforeInput);\n                        }\n                        else {\n                            let beforeResult = requestBefore(beforeInput, context);\n                            if (beforeResult.then) {\n                                beforeResult.then(requestInput => {\n                                    resolve1(requestInput);\n                                }, err => {\n                                    reject1(err);\n                                });\n                            }\n                            else {\n                                resolve1(beforeResult);\n                            }\n                        }\n\n                    });\n                };\n\n                // 请求结束执行的一些逻辑，loading,超时，执行requestAfter\n                function requestFinished() {\n                    clearTimeout(timer);\n                    timer = null;\n                    if (!context.config.silent) {\n                        loadingCount--;\n                        if (loadingCount <= 0) {\n                            loadingCount = 0;\n                            loadingOnoff = false;\n                            loadingUi && loadingUi(false, context);\n                        }\n                    }\n\n                    requestAfter && requestAfter(context);\n                }\n\n                // 【1】\n                requestBeforeWrap(beforeInput)\n                    .then(requestInput => {\n                        // 【2】登录处理\n                        if (beforeInput.config.login === true && !event.login) {\n                            // 监听，然后后续需要用户在适当的时机出发\n                            event.listen(LOGIN, (login) => {\n                                if (login) {\n                                    readyRequest(requestInput);\n                                }\n\n                                event.login = login;\n                            });\n                        }\n                        else {\n                            readyRequest(requestInput);\n                        }\n                    }, err => {\n                        catchHandle(err);\n                    });\n\n                // 发请求后的一些列操作核心流程\n                function readyRequest(requestInput) {\n                    // 【3】开发发请求前的一些处理+发请求\n                    function startRequest() {\n                        // 【4】loding处理\n                        // 静默提交无loading\n                        if (!context.config.silent) {\n                            loadingCount++;\n                            if (!loadingOnoff) {\n                                loadingUi(true, context);\n                                loadingOnoff = true;\n                            }\n                        }\n\n                        // 【5】超时处理\n                        timer = setTimeout(() => {\n                            let timeoutErr = timeoutHandle && timeoutHandle(requestInput, context);\n                            reject(timeoutErr);\n                        }, beforeInput.config.timeout);\n\n                        // 这里requestBefore返回的数据没有用到\n                        // 【6】使用本地mock\n                        if (env === ENV_LOCAL) {\n                            return new Promise((resolve2, reject2) => {\n                                // 报错todo,如果mock文件不存在\n                                let handle = dev.mock[apiName];\n                                if (typeof handle === 'function') {\n                                    apiExpress(beforeInput, resolve2, reject2, handle);\n                                }\n\n                                // todo: 增加其他类型，例如对象\n                            });\n                        }\n                        else {\n                            return request(requestInput, context);\n                        }\n                    }\n                    // 【7】开始请求\n                    startRequest()\n                        .then(successData => {\n                            // 【8】完成处理\n                            requestFinished();\n                            return successData;\n                        }, fail => {\n                            requestFinished();\n                            throw (fail);\n                        })\n                        // 【9】成功处理\n                        .then(requestData => {\n                            if (successHandle) {\n                                return successHandle(requestData, context);\n                            }\n                            else {\n                                return requestData;\n                            }\n                        })\n                        // 【10】抛给使用者\n                        .then(successData => {\n                            // 这个才是真正给api的返回结果\n                            resolve(successData);\n                        })\n                        // 【11】错误处理\n                        .catch(err => {\n                            catchHandle(err);\n                        });\n                }\n                // 错误处理，这里的err一定要符合规范\n                function catchHandle(err) {\n                    let backErr = errorHandle && errorHandle(err, config.code, context) || err;\n                    reject(backErr);\n                }\n            });\n        };\n    }\n\n    return {\n        api: apiOutput,\n        event\n    };\n};\n","// 目前实现一个简单的观察者；\nclass ApiEvent {\n    constructor(login = false) {\n        this.callbacks = {\n            // name: [fn]\n        };\n        this.login = login;\n    }\n    notify(name, ...data) {\n        let arr = this.callbacks[name];\n        if (arr) {\n            arr.forEach(fn => {\n                fn(...data);\n            });\n        }\n    }\n    listen(name, callback) {\n        if (!this.callbacks[name]) {\n            this.callbacks[name] = [];\n        }\n\n        this.callbacks[name].push(callback);\n    }\n    unlisten(name, callback) {\n        if (arguments.length === 2) {\n            if (this.callbacks[name]) {\n                let index = this.callbacks[name].indexOf(callback);\n                if (index !== -1) {\n                    this.callbacks[name].splice(index, 1);\n                }\n            }\n        }\n        else {\n            if (this.callbacks[name]) {\n                this.callbacks[name] = [];\n            }\n        }\n    }\n}\n\nmodule.exports = new ApiEvent();\n","class Req {\n    constructor({method, body}) {\n        this.body = body;\n        this.method = method;\n        // 其余参数后期再说\n    }\n}\nclass Res {\n    constructor(resolve, reject) {\n        this.resolve = resolve;\n        this.reject = reject;\n    }\n    send(data) {\n        // 还需要考虑响应头等信息,后续进一步优化保持和express一致\n        this.resolve(JSON.parse(data));\n    }\n}\n\nmodule.exports = function ({data, config}, resolve, reject, handle) {\n    let {method} = config;\n    let body = data;\n    let req = new Req({\n        method,\n        body\n    });\n    let res = new Res(resolve, reject);\n    handle(req, res);\n};\n"],"sourceRoot":""}